{"version":3,"sources":["services/gameUtils.ts","services/game.ts","services/botPlays.ts","components/BoardCell.tsx","components/Gameboard.tsx","components/Button.tsx","components/Strip.tsx","components/Pier.tsx","components/BattleMode.tsx","components/ChooseGame.tsx","components/GameSetup.tsx","components/Background.tsx","components/GamePhase.tsx","components/IntroPage.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["makeBoard","player","rows","columns","shipsAtPort","cells","Array","keys","map","index","battleStatus","ship","shipsAtSea","sunkenShips","getRow","board","Math","floor","getShipIndices","cellIndex","orientation","holes","fill","undefined","hole","isLegalDeployment","indices","some","i","length","anchorRow","getOpenCells","filter","cell","nextPlayer","game","turn","gameReducer","event","type","ships","boards","find","id","shipId","push","anchorCellIndex","deploymentIndices","includes","enemy","affectedCellIndices","s","otherShipIndices","indice","stillAfloat","c","gameMachine","Machine","context","winner","initial","states","intro","on","meta","message","arenaSetup","entry","assign","ADDBOARD","actions","always","target","cond","deployment","DEPLOYSHIP","gameon","FIRESALVO","ANNIHILATE","gameover","players","Object","determineWinner","NEWGAME","guards","arenaIsReady","allShipsDeployed","key","allShipsSunk","gameService","interpret","randomIntFromInterval","min","max","random","randomBoardIndex","randomShipAnchor","attempt","anchorIndex","randomShot","openCells","start","BoardCell","onCellClick","onCellHover","className","icon","color","onClick","e","onMouseEnter","onMouseLeave","Gameboard","showShips","style","width","_","row","column","Button","children","disabled","rest","disabledClasses","transition","Strip","useDeployShip","create","set","selectedShip","setSelectedShip","useCheating","cheating","setCheating","Pier","useService","value","send","yourShips","useEffect","toString","selectedClassnames","BattleMode","state","humanBoard","ChooseGame","GameSetup","useState","randomForMe","setRandomForMe","botBoard","shiftKey","Background","GamePhase","metaObject","IntroPage","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAEO,SAASA,EAAUC,EAAgBC,EAAcC,EAAiBC,GACvE,IAAMC,EAAgB,YAAIC,MAAMJ,EAAOC,GAASI,QAAQC,KAAI,SAAAC,GAAK,MAC9D,CACAC,aAAc,OACdC,KAAM,KACNF,YAGF,MAAO,CACNR,SACAG,YAHaA,EAAYI,KAAI,SAAAG,GAAI,sBAASA,MAI1CC,WAAY,GACZC,YAAa,GACbX,KAAMA,EACNC,QAASA,EACTE,SAGJ,SAASS,EAAOC,EAAcN,GAE5B,OADUO,KAAKC,MAAMR,EAAQM,EAAMZ,SAI9B,SAASe,EAAeH,EAAcJ,EAAYQ,EAAmBC,GAI1E,MAHgC,eAAhBA,EACdd,MAAMK,EAAKU,OAAOC,UAAKC,GAAWf,KAAI,SAACgB,EAAMf,GAAP,OAAiBU,EAAYV,KACnEH,MAAMK,EAAKU,OAAOC,UAAKC,GAAWf,KAAI,SAACgB,EAAMf,GAAP,OAAiBU,EAAaV,EAAQM,EAAMZ,WAG/E,SAASsB,EAAkBV,EAAcJ,EAAYQ,EAAmBC,GAC7E,IAAMM,EAAUR,EAAeH,EAAOJ,EAAMQ,EAAWC,GAGvD,GAAIM,EAAQC,MAAK,SAAAC,GAAC,OAAIA,EAAIb,EAAMV,MAAMwB,OAAO,KAAI,OAAO,EAGxD,IAAMC,EAAYhB,EAAOC,EAAOW,EAAQ,IACxC,OAAoB,eAAhBN,IAAgCM,EAAQC,MAAK,SAACC,GAAD,OAAOd,EAAOC,EAAOa,KAAOE,QAGzEJ,EAAQC,MAAK,SAACC,GAAD,OAAOb,EAAMV,MAAMuB,GAAGjB,QAMlC,SAASoB,EAAahB,GAC3B,OAAOA,EAAMV,MAAM2B,QAAO,SAAAC,GAAI,MAA0B,SAAtBA,EAAKvB,gBCSzC,SAASwB,EAAWC,GAElB,MAAqB,UAAdA,EAAKC,KAAmB,MAAQ,QAGzC,SAASC,EAAYF,EAAYG,GAG/B,OAAQA,EAAMC,MACZ,IAAK,WACH,IAAMxB,EAAQf,EACZsC,EAAMrC,OACNqC,EAAMpC,KACNoC,EAAMnC,QACNmC,EAAME,OAER,OAAO,2BACFL,GADL,IAEEM,OAAO,2BACFN,EAAKM,QADJ,kBAEHH,EAAMrC,OAASc,MAItB,IAAK,aACH,IAAMA,EAAQoB,EAAKM,OAAOH,EAAMrC,QAC1BU,EAAOI,EAAMX,YAAYsC,MAC7B,SAAC/B,GAAD,OAAUA,EAAKgC,KAAOL,EAAMM,UAExBxC,EAAcW,EAAMX,YAAY4B,QACpC,SAACrB,GAAD,OAAUA,EAAKgC,KAAOL,EAAMM,UAExBhC,EAAU,YAAOG,EAAMH,YACzBD,GACFC,EAAWiC,KAAX,2BACKlC,GADL,IAEEmC,gBAAiBR,EAAMQ,gBACvB1B,YAAakB,EAAMlB,eAGvB,IAAM2B,EAAoB7B,EACxBH,EACAJ,EACA2B,EAAMQ,gBACNR,EAAMlB,aAEFf,EAAQ8B,EAAKM,OAAOH,EAAMrC,QAAQI,MAAMG,KAAI,SAACyB,EAAMxB,GACvD,OAAIsC,EAAkBC,SAASvC,GACtB,2BAAKwB,GAAZ,IAAkBtB,KAAMA,EAAKgC,KAExBV,KAET,OAAO,2BACFE,GADL,IAEEM,OAAO,2BACFN,EAAKM,QADJ,kBAEHH,EAAMrC,OAFH,2BAEiBc,GAFjB,IAEwBV,QAAOD,cAAaQ,mBAItD,IAAK,YACH,IAAMG,EAAQoB,EAAKM,OAAOH,EAAMW,OAC1BhB,EAAOlB,EAAMV,MAAMiC,EAAMnB,WAC3B+B,EAAsB,CAACZ,EAAMnB,WAC7BT,EAAiC,OACjCC,EAA4B,KAC5BE,EAAW,YAAOE,EAAMF,aAC5B,GAAIoB,EAAKtB,KAAM,CAEbA,EAAOI,EAAMH,WAAW8B,MAAK,SAACS,GAAD,OAAOA,EAAER,KAAOV,EAAKtB,QAClD,IAAMyC,EAAmBlC,EACvBH,EACAJ,EACAA,EAAKmC,gBACLnC,EAAKS,aACLY,QAAO,SAACqB,GAAD,OAAYA,IAAWf,EAAMnB,aAChCmC,EAAcF,EAAiBzB,MACnC,SAAC0B,GAAD,MAAiD,SAArCtC,EAAMV,MAAMgD,GAAQ3C,gBAE7B4C,IAEHJ,EAAmB,sBAAOA,GAAP,YAA+BE,IAClDvC,EAAYgC,KAAKlC,IAEnBD,EAAe4C,EAAc,MAAQ,OAKvC,IAAMjD,EAAQU,EAAMV,MAAMG,KAAI,SAAC+C,EAAG9C,GAChC,OAAIyC,EAAoBF,SAASvC,GACxB,2BAAK8C,GAAZ,IAAe7C,iBAEV6C,KAET,OAAO,2BACFpB,GADL,IAEEC,KAAMF,EAAWC,GACjBM,OAAO,2BACFN,EAAKM,QADJ,kBAEHH,EAAMW,MAFH,2BAEgBlC,GAFhB,IAEuBV,QAAOQ,oBAIxC,IAAK,aACH,IAAME,EAAQoB,EAAKM,OAAOH,EAAMrC,QAE1BI,EAAgBU,EAAMV,MAAMG,KAAI,SAACyB,GAAD,mBAAC,eAAcA,GAAf,IAAqBvB,aAAcuB,EAAKtB,KAAO,OAASsB,EAAKvB,kBAC7FG,EAAW,YAAOE,EAAMH,YAC9B,OAAO,2BACFuB,GADL,IAEEM,OAAO,2BACFN,EAAKM,QADJ,kBAEHH,EAAMrC,OAFH,2BAEiBc,GAFjB,IAEwBV,QAAOQ,oBAK3C,OAAOsB,EAEF,IAAMqB,EAAcC,YACzB,CACEd,GAAI,OACJe,QAAS,CACPjB,OAAQ,GACRL,KAAM,KACNuB,OAAQ,MAEVC,QAAS,QACTC,OAAQ,CACNC,MAAO,CACLC,GAAI,CAAC,MAAS,cACdC,KAAM,CACJC,QAAS,8BAGbC,WAAY,CACVC,MAAO,CACLC,aAAO,SAACV,GAAD,MAAc,CACnBjB,OAAQ,GACRL,KAAM,KACNuB,OAAQ,UAGZI,GAAI,CACFM,SAAU,CACRC,QAASF,aAAO,SAACV,EAASpB,GAAV,OAAoBD,EAAYqB,EAASpB,QAG7DiC,OAAQ,CACNC,OAAQ,aACRC,KAAM,gBAERT,KAAM,CACJC,QAAS,kBAGbS,WAAY,CACVX,GAAI,CACFY,WAAY,CACVL,QAASF,aAAO,SAACV,EAASpB,GAAV,OAAoBD,EAAYqB,EAASpB,QAG7DiC,OAAQ,CACNC,OAAQ,SACRC,KAAM,oBAERT,KAAM,CACJC,QAAS,sBAGbW,OAAQ,CACNT,MAAO,CACLC,YAAO,CACLhC,KAAM,SAACsB,GAAD,MAAa,YAGvBK,GAAI,CACFc,UAAW,CACTP,QAAS,CAACF,aAAO,SAACV,EAASpB,GAAV,OAAoBD,EAAYqB,EAASpB,QAE5DwC,WAAY,CACVR,QAAS,CAACF,aAAO,SAACV,EAASpB,GAAV,OAAoBD,EAAYqB,EAASpB,SAG9DiC,OAAQ,CACN,CACEC,OAAQ,WACRC,KAAM,iBAGVT,KAAM,CACJC,QAAS,aAGbc,SAAU,CACRZ,MAAO,CACLC,YAAO,CACLT,OAAQ,SAACD,GAAD,OD1Mb,SAAyBvB,GAE9B,IADA,IAAM6C,EAAUC,OAAO1E,KAAK4B,EAAKM,QACzBb,EAAE,EAAGA,EAAEoD,EAAQnD,OAAS,EAAGD,IACjC,GALKG,EAKQI,EAAKM,OAAOuC,EAAQpD,KALRD,MAAK,SAAAM,GAAI,OAAIA,EAAKtB,QAMzC,OAAOqE,EAAQpD,GAEnB,OAAO,KCoMwBsD,CAAgBxB,OAGzCM,KAAM,CACJC,QAAS,eAIfF,GAAI,CACFoB,QAAS,eAGb,CACEC,OAAQ,CACNC,aApON,SAAsBlD,EAAYG,GAChC,OAA2C,IAApC2C,OAAO1E,KAAK4B,EAAKM,QAAQZ,QAoO5ByD,iBAjON,SAA0BnD,EAAYG,GACpC,OAAQ2C,OAAO1E,KAAK4B,EAAKM,QAAQd,MAC/B,SAAC4D,GAAD,OAAiD,IAAxCpD,EAAKM,OAAO8C,GAAKnF,YAAYyB,WAgOpC2D,aA7NN,SAAsBrD,EAAYG,GAChC,OAAO2C,OAAO1E,KAAK4B,EAAKM,QAAQd,MAC9B,SAAC4D,GAAD,OACEpD,EAAKM,OAAO8C,GAAK1E,YAAYgB,SAAWM,EAAKM,OAAO8C,GAAK3E,WAAWiB,cA+N7D4D,EAAcC,YAAUlC,GClRrC,SAASmC,EAAsBC,EAAaC,GAE1C,OAAO7E,KAAKC,MAAMD,KAAK8E,UAAYD,EAAMD,EAAM,GAAKA,GAKtD,SAASG,EAAiBhF,GACxB,OAAO4E,EAAsB,EAAG5E,EAAMV,MAAMwB,QAEvC,SAASmE,EAAiBjF,EAAcJ,GAE7C,IAAK,IAAIsF,EAAU,EAAGA,EAAU,GAAIA,IAAW,CAC7C,IAAMC,EAAcH,EAAiBhF,GAC/BK,EATDJ,KAAK8E,SAAW,GAAM,aAAe,WAU1C,GAAIrE,EAAkBV,EAAOJ,EAAMuF,EAAa9E,GAC9C,MAAO,CAAE8E,cAAa9E,eAI1B,IACE,IAAI8E,EAAc,EAClBA,EAAcnF,EAAMV,MAAMwB,OAAS,EACnCqE,IACA,CACA,IAAI9E,EAA2B,aAC/B,GAAIK,EAAkBV,EAAOJ,EAAMuF,EAAa9E,GAC9C,MAAO,CAAE8E,cAAa9E,eAGxB,GAAIK,EAAkBV,EAAOJ,EAAMuF,EADnC9E,EAAc,YAEZ,MAAO,CAAE8E,cAAa9E,gBAOrB,SAAS+E,EAAWpF,GAEzB,IAAMqF,EAAYrE,EAAahB,GAK/B,OAHoBqF,EAAU5F,KAAI,SAACyB,GAAD,OAAUA,EAAKxB,SAE7BkF,EAAsB,EAAGS,EAAUvE,OAAS,IDuOlE4D,EAAYY,Q,YExPGC,EArBG,SAAC,GAA+C,IAA7CrE,EAA4C,EAA5CA,KAAMsE,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,YAChCC,EAAS,wBAAoBF,EAAc,mBAAqB,GAAvD,YAA6DtE,EAAKtB,KAAO,SAAW,IAC7F+F,EAA6B,SAAtBzE,EAAKvB,aAA0B,cAAC,IAAD,IAAe,cAAC,IAAD,IACrDiG,EAA8B,SAAtB1E,EAAKvB,aAA0B,gBAAkB,CAAC,MAAO,QAASsC,SAASf,EAAKvB,cAAgB,eAAiB,gBAC/H,OACE,qBACEkG,QAAS,SAACC,GACJN,GAAaA,EAAYM,EAAG5E,IAElC6E,aAAc,SAACD,GACTL,GAAaA,EAAYK,EAAG5E,IAElC8E,aAAc,SAACF,GACTL,GAAaA,EAAYK,OAAGtF,IARpC,SAWE,qBAAKkF,UAAWA,EAAhB,SAA2B,sBAAMA,UAAWE,EAAjB,SAAyBD,SCK3CM,EArBG,SAAC,GAA2D,IAAzDjG,EAAwD,EAAxDA,MAAOwF,EAAiD,EAAjDA,YAAaC,EAAoC,EAApCA,YAAaS,EAAuB,EAAvBA,UAE9C/G,EAAOI,MAAMS,EAAMb,MAAMoB,KAAK,GAC9BnB,EAAUG,MAAMS,EAAMZ,SAASmB,KAAK,GAC1C,OACE,qBAAKmF,UAAS,2DAAsDQ,EAAY,cAAe,IAAMC,MAAO,CAACC,MAAO,eAApH,SACGjH,EAAKM,KAAI,SAAC4G,EAAGC,GACZ,OACE,qBAAeZ,UAAU,gBAAzB,SACGtG,EAAQK,KAAI,SAAC4G,EAAGE,GACf,IAAMnG,EAAYkG,EAAMtG,EAAMZ,QAAUmH,EAExC,OAAO,cAAC,EAAD,CAA2BrF,KAAMlB,EAAMV,MAAMc,GAAYoF,YAAaA,EAAaC,YAAaA,GAAhFrF,OAJjBkG,S,gBCULE,EAzBA,SAAC,GAQT,IAPLC,EAOI,EAPJA,SACAC,EAMI,EANJA,SACAhB,EAKI,EALJA,UACGiB,EAIC,mDACEC,EAAkBF,EAAW,2CAA6C,GAEhF,OACE,kDACMC,GADN,IAEEjB,UAAS,yMAEoCkB,EAFpC,YAEuDlB,GAChElE,KAAK,SACL2E,MAAO,CAAEU,WAAY,iBANvB,SAQGJ,MCYQK,EA1BD,SAAC,GAAkC,IAAhClH,EAA+B,EAA/BA,KAAMS,EAAyB,EAAzBA,YACff,EAAgB,YAAIC,MAAMK,EAAKU,OAAOd,QAAQC,KAAI,SAACC,GAAD,MAAY,CAClEC,aAAc,OACdC,KAAM,KACNF,YAEF,MAAoB,aAAhBW,EAEA,qBAAKqF,UAAU,oCAAoCS,MAAO,CAACC,MAAO,eAAlE,SACG9G,EAAMG,KAAI,SAACyB,GAAD,OACT,qBAAsBwE,UAAU,WAAhC,SACE,cAAC,EAAD,CAAWxE,KAAMA,KADTA,EAAKxB,YAQrB,qBAAKgG,UAAU,qEAAqES,MAAO,CAACC,MAAO,eAAnG,SACG9G,EAAMG,KAAI,SAACyB,GAAD,OACT,cAAC,EAAD,CAA4BA,KAAMA,GAAlBA,EAAKxB,aChBhBqH,EAAgBC,aAAwB,SAACC,GAAD,MAAU,CAC7DC,aAAc,KACdC,gBAAiB,SAACD,GAAD,OAA+BD,EAAI,CAAEC,sBAO3CE,EAAcJ,aAAmB,SAACC,GAAD,MAAU,CACtDI,UAAU,EACVC,YAAa,SAACD,GAAD,OAAuBJ,EAAI,CAAEI,kBA0D7BE,EAvDF,WAAO,IAAD,IACyBR,IAAlCG,EADS,EACTA,aAAcC,EADL,EACKA,gBADL,EAEiBC,IAA1BC,EAFS,EAETA,SAAUC,EAFD,EAECA,YAFD,EAIkBE,YAA6B9C,GAJ/C,0BAIR+C,EAJQ,EAIRA,MAAO9E,EAJC,EAIDA,QAAW+E,EAJV,KAKXC,GAAY,UAAAhF,EAAQjB,OAAR,4BAAyBrC,cAAe,GAM1D,OALAuI,qBAAU,WACM,eAAVH,GACFH,GAAY,KAEb,CAACA,EAAaG,IAEf,sBAAK/B,UAAU,wEAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,cAAC,EAAD,CACEgB,SAAU,CAAC,QAAS,cAAczE,SAASwF,EAAMI,YACjDhC,QAAS,WACP6B,EAAK,YAHT,wBAQCC,EAAUlI,KAAI,SAACG,GACd,IAAMkI,EAAqBlI,IAASsH,EAAe,mCAAqC,GACxF,OACA,sBAAmBxB,UAAS,eAAUoC,GAAtC,UACE,4BAAIlI,EAAKgC,KACT,qBAAK8D,UAAU,iBAAiBG,QAAS,kBAAMsB,EAAgBvH,IAA/D,SAAsE,cAAC,EAAD,CAAOA,KAAMA,EAAMS,YAAY,mBAF7FT,EAAKgC,UAMnB,sBAAK8D,UAAU,gBAAf,UACE,cAAC,EAAD,CACEgB,SAAoB,WAAVe,EACV5B,QAAS,kBAAM6B,EAAK,CAAElG,KAAM,aAActC,OAAQ,SAFpD,wBAMA,cAAC,EAAD,CACEwH,SAAoB,WAAVe,EACV5B,QAAS,kBAAM6B,EAAK,CAAElG,KAAM,aAActC,OAAQ,WAFpD,qBAMA,cAAC,EAAD,CACEwH,SAAoB,WAAVe,EACV5B,QAAS,kBAAMyB,GAAaD,IAF9B,0BCnBOU,EA3CI,WAAO,IAAD,EACKP,YAAW9C,GADhB,mBACd/B,EADc,KACdA,QAAW+E,EADG,KAEjBL,EAAWD,GAAY,SAACY,GAAD,OAAWA,EAAMX,YAE9CO,qBAAU,WAER,IAAMK,EAAatF,EAAQjB,OAAR,MACE,QAAjBiB,EAAQtB,MACVqG,EAAK,CACHlG,KAAM,YACNtC,OAAQ,MACRgD,MAAO,QACP9B,UAAWgF,EAAW6C,OAGzB,CAACtF,EAAQjB,OAAQiB,EAAQtB,KAAMqG,IAClC,IAAyBxF,EAazB,OACE,gCACE,oCACA,cAAC,EAAD,CACElC,MAAO2C,EAAQjB,OAAR,IACP8D,aAlBmBtD,EAkBU,MAlBQ,SACzC4D,EACA5E,GAEqB,UAAjByB,EAAQtB,MACVqG,EAAK,CACHlG,KAAM,YACNtC,OAAQ,QACRgD,QACA9B,UAAWc,EAAKxB,UAUhBwG,UAAWmB,IAEb,oCACA,cAAC,EAAD,CAAWrH,MAAO2C,EAAQjB,OAAR,MAAyBwE,WAAS,QCvCpDxE,EAAkB,CACtBzC,EAAU,QAAS,EAAG,EAAG,CACvB,CAAE2C,GAAI,UAAWtB,MAAO,GACxB,CAAEsB,GAAI,UAAWtB,MAAO,KAE1BrB,EAAU,QAAS,EAAG,EAAG,CACvB,CAAE2C,GAAI,UAAWtB,MAAO,GACxB,CAAEsB,GAAI,UAAWtB,MAAO,KAE1BrB,EAAU,QAAS,EAAG,EAAG,CACvB,CAAE2C,GAAI,UAAWtB,MAAO,GACxB,CAAEsB,GAAI,UAAWtB,MAAO,GACxB,CAAEsB,GAAI,UAAWtB,MAAO,MAoCb4H,EAjCI,WAAO,IAAD,EACNV,YAAW9C,GAAnBgD,EADc,oBAkBvB,OACE,qBAAKhC,UAAU,4BAAf,SACGhE,EAAOjC,KAAI,SAACO,GAAD,OACV,sBAAsB0F,UAAU,OAAhC,UACE,cAAC,EAAD,CACE1F,MAAOA,EACPwF,YAAa,kBAtBJrG,EAsBoBa,EAAMb,KAtBZC,EAsBkBY,EAAMZ,QAtBPqC,EAsBgBzB,EAAMX,YArBtEqI,EAAK,CACHlG,KAAM,WACNrC,OACAC,UACAF,OAAQ,QACRuC,eAEFiG,EAAK,CACHlG,KAAM,WACNrC,OACAC,UACAF,OAAQ,MACRuC,UAbc,IAACtC,EAAcC,EAAiBqC,KAmB5C,UAKMzB,EAAMX,YAAYyB,OALxB,YAAUd,EAAMb,YC0DTgJ,EA3FG,WAAO,IAAD,EACoBX,YACxC9C,GAFoB,0BACNsD,EADM,EACbP,MAAc9E,EADD,EACCA,QAAW+E,EADZ,OAIoBX,IAAlCG,EAJc,EAIdA,aAAcC,EAJA,EAIAA,gBAJA,EAKgBiB,oBAAS,GALzB,mBAKfC,EALe,KAKFC,EALE,KAOtBV,qBAAU,WACR,IAAMW,EAAW5F,EAAQjB,OAAR,IACjB,GAAI6G,EAASlJ,YAAYyB,OAAS,EAAG,CACnC,IAAMlB,EAAO2I,EAASlJ,YAAY,GAC5BsE,EAAasB,EAAiBsD,EAAU3I,GAC1C+D,GACF+D,EAAK,CACHlG,KAAM,aACNtC,OAAQ,MACR2C,OAAQjC,EAAKgC,GACbG,gBAAiB4B,EAAWwB,YAC5B9E,YAAasD,EAAWtD,iBAI7B,CAAC2H,EAAON,EAAM/E,EAAQjB,SAEzBkG,qBAAU,WACR,IAAM5H,EAAQ2C,EAAQjB,OAAR,MACd,GAAI2G,GAAerI,EAAMX,YAAYyB,OAAS,EAAG,CAC/C,IAAMlB,EAAOI,EAAMX,YAAY,GACzBsE,EAAasB,EAAiBjF,EAAOJ,GACvC+D,GACF+D,EAAK,CACHlG,KAAM,aACNtC,OAAQc,EAAMd,OACd2C,OAAQjC,EAAKgC,GACbG,gBAAiB4B,EAAWwB,YAC5B9E,YAAasD,EAAWtD,iBAI7B,CAAC2H,EAAON,EAAM/E,EAAQjB,OAAQ2G,IAEjCT,qBAAU,WAAO,IACPvI,EAAgBsD,EAAQjB,OAAR,MAAhBrC,YACa,OAAjB6H,GAAyB7H,EAAYyB,OAAS,GAChDqG,EAAgB9H,EAAY,MAE7B,CAACsD,EAAQjB,OAAQwF,EAAcC,IAuBlC,OACE,sBAAKzB,UAAU,6BAAf,UACE,cAAC,EAAD,CACE1F,MAAO2C,EAAQjB,OAAR,MACPwE,WAAS,EACTV,YA3Be,SAACM,EAAkC5E,GACtD,GAAKgG,EAAL,CACA,IAAM7G,EAA2ByF,EAAE0C,SAAW,WAAa,aAEzD9H,EACEiC,EAAQjB,OAAR,MACAwF,EACAhG,EAAKxB,MACLW,KAGFqH,EAAK,CACHlG,KAAM,aACNtC,OAAQ,QACR2C,OAAQqF,EAAatF,GACrBG,gBAAiBb,EAAKxB,MACtBW,gBAEF8G,EAAgB,WAWhB,sBAAKzB,UAAU,gCAAf,UACE,wEAAoCwB,QAApC,IAAoCA,OAApC,EAAoCA,EAActF,MAClD,mBAAG8D,UAAU,OAAb,wEACA,cAAC,EAAD,CACEG,QAAS,WACPyC,GAAe,IAFnB,6CCnFOG,EAJI,SAAC,GAAiD,IAA/ChC,EAA8C,EAA9CA,SACpB,OAAO,qBAAKf,UAAU,mBAAf,SAAmCe,KCkB7BiC,EAhBG,WAAO,IAAD,EACWlB,YAC/B9C,GAFoB,sBACd+C,EADc,EACdA,MAAOxE,EADO,EACPA,KAAMN,EADC,EACDA,QAMfgG,EAAa1F,EADN,eAAWwE,IAExB,OACE,qBAAI/B,UAAU,uBAAd,UACa,aAAV+B,GAAwBkB,EAAWzF,QACzB,aAAVuE,IAA4C,UAAnB9E,EAAQC,OAAqB,aAAe,gBCE7DgG,EAbG,WAAO,IAAD,EACLpB,YAAW9C,GAAnBgD,EADa,oBAEtB,OACE,sBAAKhC,UAAU,gBAAf,UACE,0HAIA,cAAC,EAAD,CAAQA,UAAU,mBAAmBG,QAAS,kBAAM6B,EAAK,YAAzD,uBCwBSmB,MAzBf,WAAgB,IAAD,EACcrB,YAAW9C,GAAtBsD,EADH,oBACJP,MACT,OACE,cAAC,EAAD,UACE,sBAAK/B,UAAU,8CAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,yCAAf,SACE,sBAAKA,UAAU,8BAAf,UACE,cAAC,EAAD,IACW,UAAVsC,GAAqB,cAAC,EAAD,IACX,eAAVA,GAA0B,cAAC,EAAD,IAChB,eAAVA,GAA0B,cAAC,EAAD,KACf,WAAVA,GAAgC,aAAVA,IAAyB,cAAC,EAAD,SAG1C,UAAVA,GAAqB,qBAAKtC,UAAU,uBAAf,SACpB,mBAAGA,UAAU,cAAcoD,KAAK,8CAAhC,SACE,cAAC,IAAD,cCfGC,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3b37ea98.chunk.js","sourcesContent":["import { Board, Cell, Game, Orientation, Player, Ship } from \"../types\";\n\nexport function makeBoard(player: Player, rows: number, columns: number, shipsAtPort: Ship[]) {\n  const cells: Cell[] = [...Array(rows * columns).keys()].map(index => \n    ({\n     battleStatus: \"open\",\n     ship: null,\n     index\n   }));\n   const ships = shipsAtPort.map(ship => ({...ship}))\n   return {\n    player,\n    shipsAtPort: ships,\n    shipsAtSea: [],\n    sunkenShips: [],\n    rows: rows,\n    columns: columns,\n    cells,\n  }\n}\nfunction getRow(board: Board, index: number) {\n  let row = Math.floor(index / board.columns);\n  return row;\n}\n\nexport function getShipIndices(board: Board, ship: Ship, cellIndex: number, orientation: Orientation) {\n  const indices = orientation === 'horizontal' \n  ? Array(ship.holes).fill(undefined).map((hole, index) => cellIndex + index) \n  : Array(ship.holes).fill(undefined).map((hole, index) => cellIndex + (index * board.columns));\n  return indices;\n}\nexport function isLegalDeployment(board: Board, ship: Ship, cellIndex: number, orientation: Orientation) {\n  const indices = getShipIndices(board, ship, cellIndex, orientation);\n\n  // Check 1: Are all indices on the board?\n  if (indices.some(i => i > board.cells.length-1)) return false;\n\n  // Check 2: For horizontal placement, are all indices on the same row?\n  const anchorRow = getRow(board, indices[0]);\n  if (orientation === 'horizontal' && indices.some((i) => getRow(board, i) !== anchorRow)) return false;\n\n  // Check 3: Are there any ships already here?\n  if (indices.some((i) => board.cells[i].ship)) return false;\n\n  // good to go\n  return true;\n}\n\nexport function getOpenCells(board: Board) {\n  return board.cells.filter(cell => cell.battleStatus === 'open')\n}\nfunction isWinner(board: Board) {\n  return getOpenCells(board).some(cell => cell.ship);\n}\nexport function determineWinner(game: Game) : Player | null {\n  const players = Object.keys(game.boards) as Player[];\n  for(let i=0; i<players.length - 1; i++ ) {\n    if (isWinner(game.boards[players[i]]))\n      return players[i];\n  }\n  return null;\n}","import { interpret, Machine, assign } from \"xstate\";\nimport {\n  Cell,\n  CellBattleStatus,\n  DeployedShip,\n  Game,\n  Orientation,\n  Player,\n  Ship,\n} from \"../types\";\nimport { determineWinner, getShipIndices, makeBoard } from \"./gameUtils\";\nexport type GameAction =\n  | {\n    type: \"START\"\n  }\n  | {\n      type: \"NEWGAME\";\n    }\n  | {\n      type: \"ADDBOARD\";\n      rows: number;\n      columns: number;\n      player: Player;\n      ships: Ship[];\n    }\n  | {\n      type: \"DEPLOYSHIP\";\n      player: Player;\n      shipId: string;\n      anchorCellIndex: number;\n      orientation: Orientation;\n    }\n  | {\n      type: \"FIRESALVO\";\n      player: Player;\n      enemy: Player;\n      cellIndex: number;\n    }\n  | {\n      type: \"ANNIHILATE\";\n      player: Player;\n    };\nfunction arenaIsReady(game: Game, event: GameAction) {\n  return Object.keys(game.boards).length === 2;\n}\n\nfunction allShipsDeployed(game: Game, event: GameAction) {\n  return !Object.keys(game.boards).some(\n    (key) => game.boards[key].shipsAtPort.length !== 0\n  );\n}\nfunction allShipsSunk(game: Game, event: GameAction) {\n  return Object.keys(game.boards).some(\n    (key) =>\n      game.boards[key].sunkenShips.length === game.boards[key].shipsAtSea.length\n  );\n}\n\nfunction nextPlayer(game: Game): Player {\n  // todo:  Extend this logic to support multiple bots\n  return game.turn === \"human\" ? \"bot\" : \"human\";\n}\n\nfunction gameReducer(game: Game, event: GameAction): Game {\n  // Assertion: rules checking has been performed, and state machinery makes all reduction\n  // logic legal.  In other words, indexes are assumed to be good, etc.\n  switch (event.type) {\n    case \"ADDBOARD\": {\n      const board = makeBoard(\n        event.player,\n        event.rows,\n        event.columns,\n        event.ships\n      );\n      return {\n        ...game,\n        boards: {\n          ...game.boards,\n          [event.player]: board,\n        },\n      };\n    }\n    case \"DEPLOYSHIP\": {\n      const board = game.boards[event.player];\n      const ship = board.shipsAtPort.find(\n        (ship) => ship.id === event.shipId\n      ) as Ship;\n      const shipsAtPort = board.shipsAtPort.filter(\n        (ship) => ship.id !== event.shipId\n      );\n      const shipsAtSea = [...board.shipsAtSea];\n      if (ship)\n        shipsAtSea.push({\n          ...ship,\n          anchorCellIndex: event.anchorCellIndex,\n          orientation: event.orientation,\n        });\n      // fill the board cells with the ship\n      const deploymentIndices = getShipIndices(\n        board,\n        ship,\n        event.anchorCellIndex,\n        event.orientation\n      );\n      const cells = game.boards[event.player].cells.map((cell, index) => {\n        if (deploymentIndices.includes(index)) {\n          return { ...cell, ship: ship.id };\n        }\n        return cell;\n      });\n      return {\n        ...game,\n        boards: {\n          ...game.boards,\n          [event.player]: { ...board, cells, shipsAtPort, shipsAtSea },\n        },\n      };\n    }\n    case \"FIRESALVO\": {\n      const board = game.boards[event.enemy];\n      const cell = board.cells[event.cellIndex];\n      let affectedCellIndices = [event.cellIndex];\n      let battleStatus: CellBattleStatus = \"miss\";\n      let ship: DeployedShip | null = null;\n      let sunkenShips = [...board.sunkenShips];\n      if (cell.ship) {\n        //hit\n        ship = board.shipsAtSea.find((s) => s.id === cell.ship) as DeployedShip;\n        const otherShipIndices = getShipIndices(\n          board,\n          ship,\n          ship.anchorCellIndex!,\n          ship.orientation!\n        ).filter((indice) => indice !== event.cellIndex);\n        const stillAfloat = otherShipIndices.some(\n          (indice) => board.cells[indice].battleStatus === \"open\"\n        );\n        if (!stillAfloat) {\n          // sunken ship.  Mark all cells (below)\n          affectedCellIndices = [...affectedCellIndices, ...otherShipIndices];\n          sunkenShips.push(ship);\n        }\n        battleStatus = stillAfloat ? \"hit\" : \"sunk\";\n      } else {\n        // miss\n      }\n      // the fired salvo will affect either 1 cell, or N sells if a ship is sunk\n      const cells = board.cells.map((c, index) => {\n        if (affectedCellIndices.includes(index)) {\n          return { ...c, battleStatus };\n        }\n        return c;\n      });\n      return {\n        ...game,\n        turn: nextPlayer(game),\n        boards: {\n          ...game.boards,\n          [event.enemy]: { ...board, cells, sunkenShips },\n        },\n      };\n    }\n    case \"ANNIHILATE\": {\n      const board = game.boards[event.player];\n      // sink all cells with a ship\n      const cells: Cell[] = board.cells.map((cell) => ({...cell, battleStatus: cell.ship ? \"sunk\" : cell.battleStatus}));\n      const sunkenShips = [...board.shipsAtSea];\n      return {\n        ...game,\n        boards: {\n          ...game.boards,\n          [event.player]: { ...board, cells, sunkenShips },\n        },\n      };\n    }\n  }\n  return game;\n}\nexport const gameMachine = Machine<Game, GameAction>(\n  {\n    id: \"game\",\n    context: {\n      boards: {},\n      turn: null,\n      winner: null,\n    },\n    initial: \"intro\",\n    states: {\n      intro: {\n        on: {\"START\": 'arenaSetup'},\n        meta: {\n          message: \"Welcome to Battlestrip!!!\"\n        }\n      },\n      arenaSetup: {\n        entry: [\n          assign((context) => ({\n            boards: {},\n            turn: null,\n            winner: null,\n          })),\n        ],\n        on: {\n          ADDBOARD: {\n            actions: assign((context, event) => gameReducer(context, event)),\n          },\n        },\n        always: {\n          target: \"deployment\",\n          cond: \"arenaIsReady\",\n        },\n        meta: {\n          message: \"Choose a Game\",\n        },\n      },\n      deployment: {\n        on: {\n          DEPLOYSHIP: {\n            actions: assign((context, event) => gameReducer(context, event)),\n          },\n        },\n        always: {\n          target: \"gameon\",\n          cond: \"allShipsDeployed\",\n        },\n        meta: {\n          message: \"Deploy Your Ships\",\n        },\n      },\n      gameon: {\n        entry: [\n          assign({\n            turn: (context) => \"human\",\n          }),\n        ],\n        on: {\n          FIRESALVO: {\n            actions: [assign((context, event) => gameReducer(context, event))],\n          },\n          ANNIHILATE: {\n            actions: [assign((context, event) => gameReducer(context, event))],\n          },\n        },\n        always: [\n          {\n            target: \"gameover\",\n            cond: \"allShipsSunk\",\n          },\n        ],\n        meta: {\n          message: \"Game On!\",\n        },\n      },\n      gameover: {\n        entry: [\n          assign({\n            winner: (context) => determineWinner(context)\n          }),\n        ],\n        meta: {\n          message: \"Game Over\",\n        },\n      },\n    },\n    on: {\n      NEWGAME: \"arenaSetup\",\n    },\n  },\n  {\n    guards: {\n      arenaIsReady,\n      allShipsDeployed,\n      allShipsSunk,\n    },\n  }\n);\n\nexport const gameService = interpret(gameMachine);\ngameService.start();\n\n","import { Board, Orientation, Ship } from \"../types\";\nimport { getOpenCells, isLegalDeployment } from \"./gameUtils\";\n\nfunction randomIntFromInterval(min: number, max: number) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\nfunction randomOrientation(): Orientation {\n  return Math.random() < 0.5 ? \"horizontal\" : \"vertical\";\n}\nfunction randomBoardIndex(board: Board) {\n  return randomIntFromInterval(0, board.cells.length);\n}\nexport function randomShipAnchor(board: Board, ship: Ship) {\n  // Take 10 random shots before brute-forcing through the grid.\n  for (let attempt = 0; attempt < 10; attempt++) {\n    const anchorIndex = randomBoardIndex(board);\n    const orientation = randomOrientation();\n    if (isLegalDeployment(board, ship, anchorIndex, orientation)) {\n      return { anchorIndex, orientation };\n    }\n  }\n  // brute force\n  for (\n    let anchorIndex = 0;\n    anchorIndex < board.cells.length - 1;\n    anchorIndex++\n  ) {\n    let orientation: Orientation = \"horizontal\";\n    if (isLegalDeployment(board, ship, anchorIndex, orientation)) {\n      return { anchorIndex, orientation };\n    }\n    orientation = \"vertical\";\n    if (isLegalDeployment(board, ship, anchorIndex, orientation)) {\n      return { anchorIndex, orientation };\n    }\n  }\n  // boom\n  return undefined;\n}\n\nexport function randomShot(board: Board) {\n  // get all open cells\n  const openCells = getOpenCells(board);\n  // produce an array of their grid indices\n  const openIndices = openCells.map((cell) => cell.index);\n  // pick a random, open grid indice\n  const randomIndex = randomIntFromInterval(0, openCells.length - 1);\n  return openIndices[randomIndex];\n}\n","import React from \"react\";\nimport { Cell } from \"../types\";\nimport {FaCircle, FaTimes} from 'react-icons/fa'\n\ninterface Props {\n  cell: Cell;\n  onCellClick?: (e: React.MouseEvent<HTMLElement>, cell: Cell) => void;\n  onCellHover?: (e: React.MouseEvent<HTMLElement>, cell?: Cell) => void;\n}\nconst BoardCell = ({ cell, onCellClick, onCellHover }: Props) => {\n  const className = `border-l cell ${onCellClick ? ' cursor-pointer ' : ''} ${cell.ship ? \" ship \" : \"\"}`;\n  const icon = cell.battleStatus === 'open' ? <FaCircle /> : <FaTimes />\n  const color = cell.battleStatus === 'open' ? 'text-gray-800' : ['hit', 'sunk' ].includes(cell.battleStatus) ? 'text-red-900' : 'text-gray-300'\n  return (\n    <div\n      onClick={(e) => {\n        if (onCellClick) onCellClick(e, cell);\n      }}\n      onMouseEnter={(e) => {\n        if (onCellHover) onCellHover(e, cell)\n      }}\n      onMouseLeave={(e) => {\n        if (onCellHover) onCellHover(e, undefined)\n      }}\n    >\n      <div className={className}><span className={color}>{icon}</span></div>\n    </div>\n  );\n};\n\nexport default BoardCell;\n","import React from \"react\";\nimport { Board, Cell } from \"../types\";\nimport BoardCell from \"./BoardCell\";\ninterface Props {\n  board: Board;\n  onCellClick?: (e: React.MouseEvent<HTMLElement>, cell: Cell) => void;\n  onCellHover?: (e: React.MouseEvent<HTMLElement>, cell?: Cell) => void;\n  showShips?: boolean;\n}\nconst Gameboard = ({ board, onCellClick, onCellHover, showShips }: Props) => {\n  // cheesy way of looping in JSX\n  const rows = Array(board.rows).fill(0);\n  const columns = Array(board.columns).fill(0);\n  return (\n    <div className={`mb-4 flex flex-col border-b border-r bg-blue-800 ${showShips ? ' showships ': ''}`} style={{width: 'max-content'}}>\n      {rows.map((_, row) => {\n        return (\n          <div key={row} className=\"flex border-t\">\n            {columns.map((_, column) => {\n              const cellIndex = row * board.columns + column;\n\n              return <BoardCell key={cellIndex} cell={board.cells[cellIndex]} onCellClick={onCellClick} onCellHover={onCellHover}/>;\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Gameboard;\n","import React from \"react\";\n\nconst Button = ({\n  children,\n  disabled,\n  className,\n  ...rest\n}: React.DetailedHTMLProps<\n  React.ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n>) => {\n  const disabledClasses = disabled ? 'cursor-not-allowed text-white opacity-50' : '';\n\n  return (\n    <button\n      {...rest}\n      className={`bg-blue-500 text-white active:bg-blue-600 font-thin md:font-bold \n      uppercase text-xs px-2 md:px-4 py-2 rounded shadow hover:shadow-md \n      outline-none focus:outline-none mr-1 mb-1  ${disabledClasses} ${className}`}\n      type='button'\n      style={{ transition: \"all .15s ease\" }}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport { Cell, Orientation, Ship } from \"../types\";\nimport BoardCell from \"./BoardCell\";\n\ninterface Props {\n  ship: Ship;\n  orientation: Orientation;\n}\nconst Strip = ({ ship, orientation }: Props) => {\n  const cells: Cell[] = [...Array(ship.holes).keys()].map((index) => ({\n    battleStatus: \"open\",\n    ship: null,\n    index,\n  }));\n  if (orientation === \"vertical\") {\n    return (\n      <div className='border-b border-r  text-gray-800 ' style={{width: 'max-content'}}>\n        {cells.map((cell) => (\n          <div key={cell.index} className='border-t'>\n            <BoardCell cell={cell} />\n          </div>\n        ))}\n      </div>\n    );\n  }\n  return (\n    <div className=\"flex flex-col md:flex-row border-t border-b border-r bg-brown-400 \" style={{width: 'max-content'}}>\n      {cells.map((cell) => (\n        <BoardCell key={cell.index} cell={cell} />\n      ))}\n    </div>\n  );\n};\n\nexport default Strip;\n","import { useService } from \"@xstate/react\";\nimport React, { useEffect } from \"react\";\nimport { GameAction, gameService } from \"../services/game\";\nimport { Game, Ship } from \"../types\";\nimport create from \"zustand\";\nimport Button from \"./Button\";\nimport Strip from \"./Strip\";\n\ntype DeployShipState = {\n  selectedShip: Ship | null;\n  setSelectedShip: (ship: Ship | null) => void;\n};\nexport const useDeployShip = create<DeployShipState>((set) => ({\n  selectedShip: null,\n  setSelectedShip: (selectedShip: Ship | null) => set({ selectedShip }),\n}));\n\ntype CheatState = {\n  cheating: boolean;\n  setCheating: (cheating: boolean) => void;\n};\nexport const useCheating = create<CheatState>((set) => ({\n  cheating: false,\n  setCheating: (cheating: boolean) => set({ cheating }),\n}));\n\nconst Pier = () => {\n  const { selectedShip, setSelectedShip } = useDeployShip();\n  const { cheating, setCheating } = useCheating();\n\n  const [{ value, context }, send] = useService<Game, GameAction>(gameService);\n  const yourShips = context.boards[\"human\"]?.shipsAtPort || [];\n  useEffect(() => {\n    if (value === \"arenaSetup\") {\n      setCheating(false);\n    }\n  }, [setCheating, value]);\n  return (\n    <div className='w-3/12 md:w-1/12 flex flex-col px-2 py-4 justify-between bg-brown-700'>\n      <div className='flex flex-col'>\n        <Button\n          disabled={[\"intro\", \"arenaSetup\"].includes(value.toString())}\n          onClick={() => {\n            send(\"NEWGAME\");\n          }}\n        >\n          start over\n        </Button>\n        {yourShips.map((ship) => { \n          const selectedClassnames = ship === selectedShip ? ' bg-white opacity-25 text-black ' : '';\n          return (\n          <div key={ship.id} className={`mt-2 ${selectedClassnames}`}>\n            <p>{ship.id}</p>\n            <div className=\"cursor-pointer\" onClick={() => setSelectedShip(ship)}><Strip ship={ship} orientation='horizontal' /></div>\n          </div>\n        )})}\n      </div>\n      <div className='flex flex-col'>\n        <Button\n          disabled={value !== \"gameon\"}\n          onClick={() => send({ type: \"ANNIHILATE\", player: \"bot\" })}\n        >\n          Annihilate\n        </Button>\n        <Button\n          disabled={value !== \"gameon\"}\n          onClick={() => send({ type: \"ANNIHILATE\", player: \"human\" })}\n        >\n          Concede\n        </Button>\n        <Button\n          disabled={value !== \"gameon\"}\n          onClick={() => setCheating(!cheating)}\n        >\n          Cheat\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Pier;\n","import { useService } from \"@xstate/react\";\nimport React, { useEffect } from \"react\";\nimport { randomShot } from \"../services/botPlays\";\nimport { gameService } from \"../services/game\";\nimport { Cell, Player } from \"../types\";\nimport Gameboard from \"./Gameboard\";\nimport { useCheating } from \"./Pier\";\n\nconst BattleMode = () => {\n  const [{ context }, send] = useService(gameService);\n  const cheating = useCheating((state) => state.cheating);\n\n  useEffect(() => {\n    // todo:  Don't assume the bot will want to kill the human first\n    const humanBoard = context.boards[\"human\"];\n    if (context.turn === \"bot\") {\n      send({\n        type: \"FIRESALVO\",\n        player: \"bot\",\n        enemy: \"human\",\n        cellIndex: randomShot(humanBoard),\n      });\n    }\n  }, [context.boards, context.turn, send]);\n  const handleHumanTurn = (enemy: Player) => (\n    e: React.MouseEvent,\n    cell: Cell\n  ) => {\n    if (context.turn === \"human\") {\n      send({\n        type: \"FIRESALVO\",\n        player: \"human\",\n        enemy,\n        cellIndex: cell.index,\n      });\n    }\n  };\n  return (\n    <div>\n      <p>Bot</p>\n      <Gameboard\n        board={context.boards[\"bot\"]}\n        onCellClick={handleHumanTurn(\"bot\")}\n        showShips={cheating}\n      />\n      <p>You</p>\n      <Gameboard board={context.boards[\"human\"]} showShips />\n    </div>\n  );\n};\n\nexport default BattleMode;\n","import { useService } from \"@xstate/react\";\nimport React from \"react\";\nimport { gameService } from \"../services/game\";\nimport { makeBoard } from \"../services/gameUtils\";\nimport { Board, Ship } from \"../types\";\nimport Gameboard from \"./Gameboard\";\n\nconst boards: Board[] = [\n  makeBoard(\"human\", 3, 3, [\n    { id: \"2-holer\", holes: 2 },\n    { id: \"3-holer\", holes: 3 },\n  ]),\n  makeBoard(\"human\", 5, 5, [\n    { id: \"2-holer\", holes: 2 },\n    { id: \"3-holer\", holes: 3 },\n  ]),\n  makeBoard(\"human\", 8, 8, [\n    { id: \"2-holer\", holes: 2 },\n    { id: \"3-holer\", holes: 3 },\n    { id: \"4-holer\", holes: 4 },\n  ]),\n];\nconst ChooseGame = () => {\n  const [, send] = useService(gameService);\n  const addBoards = (rows: number, columns: number, ships: Ship[]) => {\n    send({\n      type: \"ADDBOARD\",\n      rows,\n      columns,\n      player: \"human\",\n      ships,\n    });\n    send({\n      type: \"ADDBOARD\",\n      rows,\n      columns,\n      player: \"bot\",\n      ships,\n    });\n  };\n  return (\n    <div className='flex flex-col md:flex-row'>\n      {boards.map((board) => (\n        <div key={board.rows} className='mr-4'>\n          <Gameboard\n            board={board}\n            onCellClick={() => addBoards(board.rows, board.columns, board.shipsAtPort)}\n          />\n          {`${board.shipsAtPort.length} ships`}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ChooseGame;\n","import { useService } from \"@xstate/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { randomShipAnchor } from \"../services/botPlays\";\nimport { GameAction, gameService } from \"../services/game\";\nimport { isLegalDeployment } from \"../services/gameUtils\";\nimport { Cell, Game, Orientation } from \"../types\";\nimport Button from \"./Button\";\nimport Gameboard from \"./Gameboard\";\nimport { useDeployShip } from \"./Pier\";\n\nconst GameSetup = () => {\n  const [{ value: state, context }, send] = useService<Game, GameAction>(\n    gameService\n  );\n  const { selectedShip, setSelectedShip } = useDeployShip();\n  const [randomForMe, setRandomForMe] = useState(false);\n\n  useEffect(() => {\n    const botBoard = context.boards[\"bot\"];\n    if (botBoard.shipsAtPort.length > 0) {\n      const ship = botBoard.shipsAtPort[0];\n      const deployment = randomShipAnchor(botBoard, ship);\n      if (deployment) {\n        send({\n          type: \"DEPLOYSHIP\",\n          player: \"bot\",\n          shipId: ship.id,\n          anchorCellIndex: deployment.anchorIndex,\n          orientation: deployment.orientation,\n        });\n      }\n    }\n  }, [state, send, context.boards]);\n\n  useEffect(() => {\n    const board = context.boards[\"human\"];\n    if (randomForMe && board.shipsAtPort.length > 0) {\n      const ship = board.shipsAtPort[0];\n      const deployment = randomShipAnchor(board, ship);\n      if (deployment) {\n        send({\n          type: \"DEPLOYSHIP\",\n          player: board.player,\n          shipId: ship.id,\n          anchorCellIndex: deployment.anchorIndex,\n          orientation: deployment.orientation,\n        });\n      }\n    }\n  }, [state, send, context.boards, randomForMe]);\n\n  useEffect(() => {\n    const { shipsAtPort } = context.boards[\"human\"];\n    if (selectedShip === null && shipsAtPort.length > 0) {\n      setSelectedShip(shipsAtPort[0]);\n    }\n  }, [context.boards, selectedShip, setSelectedShip]);\n  const handleDeploy = (e: React.MouseEvent<HTMLElement>, cell: Cell) => {\n    if (!selectedShip) return;\n    const orientation: Orientation = e.shiftKey ? \"vertical\" : \"horizontal\";\n    if (\n      isLegalDeployment(\n        context.boards[\"human\"],\n        selectedShip,\n        cell.index,\n        orientation\n      )\n    ) {\n      send({\n        type: \"DEPLOYSHIP\",\n        player: \"human\",\n        shipId: selectedShip.id,\n        anchorCellIndex: cell.index,\n        orientation,\n      });\n      setSelectedShip(null);\n    }\n  };\n\n  return (\n    <div className='flex flex-col items-center'>\n      <Gameboard\n        board={context.boards[\"human\"]}\n        showShips\n        onCellClick={handleDeploy}\n      />\n      <div className='bg-blue-300 text-blue-800 p-2'>\n        <p>Click a board grid to place the {selectedShip?.id}</p>\n        <p className=\"mb-4\">Press and hold the Shift key to place the ship vertically.</p>\n        <Button\n          onClick={() => {\n            setRandomForMe(true);\n          }}\n        >\n          Or Place My Ships For Me\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default GameSetup;\n","import React from \"react\";\n\nconst Background = ({ children }: { children: React.ReactNode }) => {\n  return <div className='h-screen pattern'>{children}</div>;\n};\n\nexport default Background;\n","import { useService } from '@xstate/react';\nimport React from 'react';\nimport { GameAction, gameService } from '../services/game';\nimport { Game } from '../types';\n\nconst GamePhase = () => {\n  const [{value, meta, context}] = useService<Game, GameAction>(\n    gameService\n  );\n  // I'm not sure how people go about doing this with XState.\n  // I came to it by loggin the state, and noticing the same of 'meta'\n  const metaKey = `game.${value}`;\n  const metaObject = meta[metaKey];\n  return (\n    <h1 className=\"text-2xl md:text-6xl\">\n      {value !== 'gameover' && metaObject.message}\n      {value === 'gameover' && (context.winner === 'human' ? 'You Win!!!' : 'You lose')}\n    </h1>\n  );\n};\n\nexport default GamePhase;","import { useService } from \"@xstate/react\";\nimport React from \"react\";\nimport { gameService } from \"../services/game\";\nimport Button from \"./Button\";\n\nconst IntroPage = () => {\n  const [, send] = useService(gameService);\n  return (\n    <div className=\"flex flex-col\">\n      <h2>\n        Deploy your ships to sea, then try to sink your opponent's ships before\n        they sink yours!\n      </h2>\n      <Button className=\"self-center mt-8\" onClick={() => send(\"NEWGAME\")}>Start</Button>\n    </div>\n  );\n};\n\nexport default IntroPage;\n","import { useService } from \"@xstate/react\";\nimport React from \"react\";\nimport { gameService } from \"../services/game\";\nimport BattleMode from \"./BattleMode\";\nimport ChooseGame from \"./ChooseGame\";\nimport GameSetup from \"./GameSetup\";\nimport Background from \"./Background\";\nimport Pier from \"./Pier\";\nimport GamePhase from \"./GamePhase\";\nimport IntroPage from \"./IntroPage\";\nimport { FaGithub } from \"react-icons/fa\";\n\nfunction App() {\n  const [{ value: state }] = useService(gameService);\n  return (\n    <Background>\n      <div className='flex flex-row text-gray-300 h-full relative'>\n        <Pier />\n        <div className='w-9/12 md:w-11/12 flex  justify-center'>\n          <div className='flex flex-col  items-center'>\n            <GamePhase />\n            {state === \"intro\" && <IntroPage />}\n            {state === \"arenaSetup\" && <ChooseGame />}\n            {state === \"deployment\" && <GameSetup />}\n            {(state === \"gameon\" || state === \"gameover\") && <BattleMode />}\n          </div>\n        </div>\n        {state === 'intro' && <div className='absolute m-2 right-0'>\n          <a className=\"md:text-3xl\" href='https://github.com/ChrisLincoln/battlestrip'>\n            <FaGithub />\n          </a>\n        </div>}\n      </div>\n    </Background>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './tailwind.generated.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}